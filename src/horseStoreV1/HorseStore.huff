// send calldata -> function dispatch -> function

// macros -> function (different) 
// contract creation bytecode: 60008060093d393df3
// after pushing 0 to stack: 60018060093d393df35f

// each compiled contract has 3 sections:
//    * contract creation
//    * runtime
//    * metadata
// compiler adds INVALID opcode between sections

// CODCOPY (39) -> contract creation -> deploying contract 

// EVM is a stack machine -> temporary data 
// Memory -> stick any variable (anywhere) and it stays there until the end of the transaction
// Storage -> persistant - data stays there (even after transaction) -> more expensive 

// PUSHX -> X is the number of bytes pushed to the stack

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // slot 0

#define macro MAIN() = takes(0) returns(0) {
    /*
    0x00 // PUSH0 -> TOP [0] BOTTOM
    calldataload     // [calldata] -> puts the first 32 bytes of calldata on stack
    0xe0             // [0xe0, calldata]
    shr              // [function selector]
    */
    0x00 calldataload 0xE0 shr // function selector

    // if f_selector == updateHorseNumber -> jump there
    dup1 // duplicate top of the stack
    // cast sig "updateHorseNumber(uint256)" -> 0xcdfead2e
    // __FUNC_SIG -> 0xcdfead2e
    __FUNC_SIG(updateHorseNumber)
    eq // true if function selector matches
    // jump to function 
    // cast sig "readNumberOfHorses()" -> 0xe026c017
    updateJump    // [updateHorseNumberPC, true/false]
    jumpi

    // __FUNC_SIG -> 0xe026c017
    __FUNC_SIG(readNumberOfHorses)
    eq
    readJump
    jumpi

    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Give a pointer to storage (storage slot)
    // 2. Get the store value from calldata
    // 3. Store the number of horses -> sstore
    0x04 
    calldataload
    [NUMBER_OF_HORSES_STORAGE_SLOT] // push the value stored at pointer to storage slot to stack
    sstore
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. get the storage slot
    // 2. load the value at the storage slot to memory 
    // 3. return value
    [NUMBER_OF_HORSES_STORAGE_SLOT]
    sload
    0x00
    mstore 

    // size in bytes (32)
    0x20 0x00 return // exits current context
}